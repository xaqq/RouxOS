====================================================================================
================================ RouxOS CodingStyle ================================
====================================================================================

I) Naming:
- I use UpperCamelCase for class Name, file name, lambda and object,
  and lowerCamelCase for member function naming.
- Header parameter name must be as verbose as possible (which makes it way much
  easyier for people using autocompletion to work), exception is made for operators.
- A leading underscore is used for class member.
- If a file contains a class declaration/implementation, it must be named after
  the class name. In addition, no file should contain more than one _exported_
  declaration (so implementation specific declaration -as d pointer- isn't concerned)


II) Namespace / Implementation details:
As we may use helper class / struct / function in header, in order to not pollute the
global namespace, everything that doesn't need to be exported needs to reside
in the class namespace, or -if shared across implementation-, in a namespace
starting by 2 underscore, like: "__ListImplementation"
IE:

template <typename T>
class List {
protected:
  template <typename T>
  struct LinkedList { /* Foo bar */ };

  LinkedList	*d;
};

Then you can either forward declare it in your cpp file, or in your header file
if it's a template. Forward declaration should be used as much as possible, as it
will reduce compile time.



III) Indentation:
I use the default emacs indentation: 2 spaces in class, 8 for tab.
Please also align the declaration when it's possible, ie:
int	main(void)
{
  int	q;
  size_t	w;
  __ListImplementation::LinkedList	x;
}

Must be:
int		main(void) // Aligned too
{
  int		q;
  size_t	w;
  __ListImplementation::LinkedList	x;
}



IV) Line size / function size:
This is really up to you. However I __HIGHLY__ recommend to be under 80 columns
a line.



V) Debugging:
I very much recommend to use the macro assert(). This must look a but 'hard' as a
debugging solution, but as long as you have condition that cannot be false in a
normal behaviour, this may save you from some headaches.
SA: http://en.wikipedia.org/wiki/Design_by_contract
